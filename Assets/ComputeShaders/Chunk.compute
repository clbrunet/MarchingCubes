#pragma kernel GenerateNoiseValues
#pragma kernel GenerateMeshData

#include "Noise.hlsl"
#include "MarchingCubesLookupTables.hlsl"

uint _AxisSegmentCount;
float _NoiseScale;

float3 _Coordinate;

RWStructuredBuffer<float> _NoiseValues;

[numthreads(4,4,4)]
void GenerateNoiseValues(uint3 id : SV_DispatchThreadID)
{
    if (id.z > _AxisSegmentCount || id.y > _AxisSegmentCount || id.x > _AxisSegmentCount)
    {
        return;
    }
    uint index = id.z * (_AxisSegmentCount + 1) * (_AxisSegmentCount + 1) + id.y * (_AxisSegmentCount + 1) + id.x;
    float3 pointCoordinate = _Coordinate + (float3) id / (float) _AxisSegmentCount;
    float3 noiseCoordinate = pointCoordinate * _NoiseScale;
    _NoiseValues[index] = SimplexNoise(noiseCoordinate) * 0.5 + 0.5;
}

struct Triangle
{
    float3 vertexA;
    float3 vertexB;
    float3 vertexC;
};

float _IsosurfaceThreshold;

AppendStructuredBuffer<float> _Triangles;

[numthreads(4,4,4)]
void GenerateMeshData(uint3 id : SV_DispatchThreadID)
{
    if (id.z >= _AxisSegmentCount || id.y >= _AxisSegmentCount || id.x >= _AxisSegmentCount)
    {
        return;
    }
    int lookupCaseIndex = 0;
    int i = 0b0000_0001;
    for (int j = 0; j < 8; j++)
    {
        uint3 corner = id + CORNERS[j];
        uint index = id.z * (_AxisSegmentCount) * (_AxisSegmentCount) + id.y * (_AxisSegmentCount) + id.x;
        if (_NoiseValues[index] >= _IsosurfaceThreshold)
        {
            lookupCaseIndex |= i;
        }
        i <<= 1;
    }
    uint index = id.z * (_AxisSegmentCount) * (_AxisSegmentCount) + id.y * (_AxisSegmentCount) + id.x;
}
